<templateSet group="AppDev - Groovy - Spock - v1.0.0">
  <template name="S" value="$SELECTION$ extends spock.lang.Specification&#10;" description="Spock - Surround class with extends Specification" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="true" />
    </context>
  </template>
  <template name="defs" value="def setup() {&#10;    $END$&#10;}&#10;" description="Spock - def setup" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_DECLARATION" value="true" />
    </context>
  </template>
  <template name="defc" value="def cleanup() {&#10;    $END$&#10;}&#10;" description="Spock - def cleanup" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_DECLARATION" value="true" />
    </context>
  </template>
  <template name="defss" value="def setupSpec() {&#10;    $END$&#10;}&#10;" description="Spock - def setup spec" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_DECLARATION" value="true" />
    </context>
  </template>
  <template name="defcs" value="def cleanupSpec() {&#10;    $END$&#10;}&#10;" description="Spock - def cleanup spec" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_DECLARATION" value="true" />
    </context>
  </template>
  <template name="defwt" value="def &quot;$FUNCTION$&quot;() {&#10;    when:&#10;    $END$&#10;    &#10;    then:&#10;    &#10;}&#10;" description="Spock - def when then" toReformat="true" toShortenFQNames="true">
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GROOVY_DECLARATION" value="true" />
    </context>
  </template>
  <template name="defgwt" value="def &quot;$FUNCTION$&quot;() {&#10;    given:&#10;    $END$&#10;    &#10;    when:&#10;    &#10;    &#10;    then:&#10;    &#10;}&#10;" description="Spock - def given when then" toReformat="true" toShortenFQNames="true">
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GROOVY_DECLARATION" value="true" />
    </context>
  </template>
  <template name="defge" value="def &quot;$FUNCTION$&quot;() {&#10;    given:&#10;    $END$&#10;    &#10;    expect:&#10;    &#10;}&#10;" description="Spock - def given expect" toReformat="true" toShortenFQNames="true">
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GROOVY_DECLARATION" value="true" />
    </context>
  </template>
  <template name="defe" value="def &quot;$FUNCTION$&quot;() {&#10;    expect:&#10;    $END$&#10;}&#10;" description="Spock - def expect" toReformat="true" toShortenFQNames="true">
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GROOVY_DECLARATION" value="true" />
    </context>
  </template>
  <template name="defgew" value="@spock.lang.Unroll&#10;def &quot;$FUNCTION$&quot;() {&#10;    given:&#10;    $END$&#10;    &#10;    expect:&#10;    &#10;    &#10;    where:&#10;    &#10;}&#10;" description="Spock - def given expect where" toReformat="true" toShortenFQNames="true">
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GROOVY_DECLARATION" value="true" />
    </context>
  </template>
  <template name="defew" value="@spock.lang.Unroll&#10;def &quot;$FUNCTION$&quot;() {&#10;    expect:&#10;    $END$&#10;    &#10;    where:&#10;    &#10;}&#10;" description="Spock - def expect where" toReformat="true" toShortenFQNames="true">
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GROOVY_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>